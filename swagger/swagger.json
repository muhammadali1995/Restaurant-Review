{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Restaurnat Review",
    "description": "This is a sample",
    "version": "1.0.5"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://api.toptal/api"
    }
  ],
  "tags": [
    {
      "name": "Review Restaurant",
      "description": "Test Project",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Access to restaurant reviews",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/restaurant": {
      "post": {
        "tags": ["restaurant"],
        "summary": "Add a new restaurant",
        "description": "Add a new restaurant",
        "operationId": "addRestaurant",
        "requestBody": {
          "description": "Create a new restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["restaurant"],
        "summary": "Fetch Restaurants",
        "description": "",
        "operationId": "fetchAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page for pagination",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Rating for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurant"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/restaurant/{id}": {
      "get": {
        "tags": ["restaurant"],
        "summary": "Find restaurant by ID",
        "description": "Returns a single restaurant",
        "operationId": "getRestaurantById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of restaurant to return. Example: 89",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "expand params for getting relational data",
            "required": false,
            "schema": {
              "type": "string",
              "example": "reviews"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": ["restaurant"],
        "summary": "Update an existing restaurant",
        "description": "Update an existing restaurant by Id",
        "operationId": "updateRestaurant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched. Use 89 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["restaurant"],
        "summary": "Deletes a restaurant",
        "description": "",
        "operationId": "deleteRestaurant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Restaurant id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid restaurant value"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Get all users",
        "description": "",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The id that needs to be fetched. Use 51 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/register": {
      "post": {
        "tags": ["user"],
        "summary": "Register a user",
        "description": "Register a user",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RegisterForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RegisterForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LoginForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when toekn expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by id",
        "description": "",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched. Use 51 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in admin.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in admin.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/review": {
      "post": {
        "tags": ["review"],
        "summary": "Add a new review",
        "description": "Add a new review",
        "operationId": "createReview",
        "requestBody": {
          "description": "Create a new review",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/review/{id}": {
      "put": {
        "tags": ["review"],
        "summary": "Update an existing review",
        "description": "Update an existing review by Id",
        "operationId": "updateReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the review that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existing review",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["review"],
        "summary": "Fetch a review",
        "description": "Fetch a review by id",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the review that needs to be get",
            "required": true,
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurant"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["review"],
        "summary": "Delete review",
        "description": "This can only be done by the logged in admin.",
        "operationId": "deleteReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the review that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Review not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/review/reply": {
      "post": {
        "tags": ["review"],
        "summary": "Add a reply a reply",
        "description": "Add a new reply",
        "operationId": "addRestaurant",
        "requestBody": {
          "description": "Create a new reply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewReply"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReviewReply"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewReply"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewReply"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewReply"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/comment": {
      "post": {
        "tags": ["comment"],
        "summary": "Add a new comment",
        "description": "Add a new comment",
        "operationId": "createComment",
        "requestBody": {
          "description": "Create a new comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/comment/{id}": {
      "put": {
        "tags": ["comment"],
        "summary": "Update an existing comment",
        "description": "Update an existing comment by Id",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existing comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["comment"],
        "summary": "Fetch a comment",
        "description": "Fetch a comment by id",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the comment that needs to be get",
            "required": true,
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["comment"],
        "summary": "Delete comment",
        "description": "This can only be done by the logged in admin.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the comment that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/comment/reply": {
      "post": {
        "tags": ["comment"],
        "summary": "Add a reply to a comment",
        "description": "Add a new reply",
        "operationId": "addReply",
        "requestBody": {
          "description": "Create a new reply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentReply"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentReply"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentReply"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Restaurant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Mc Donald's"
          },
          "address": {
            "type": "string",
            "example": "Palo Alto, CA, USA"
          },
          "description": {
            "type": "string",
            "example": "Burger Restaurant"
          },
          "owner": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        }
      },
      "RestaurantForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mc Donald's"
          },
          "address": {
            "type": "string",
            "example": "Palo Alto, CA, USA"
          },
          "description": {
            "type": "string",
            "example": "Burger Restaurant"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "comment": {
            "type": "string",
            "example": "This is a comment"
          },
          "user": {
            "type": "User"
          },
          "restaurant": {
            "type": "Restaurnat"
          },
          "created_at": {
            "type": "string",
            "example": "Feb 26, 2021, 5:09:31 AM"
          },
          "date_of_visit": {
            "type": "string",
            "example": "Feb 18, 2021"
          },
          "rating": {
            "type": "integer",
            "example": "1"
          },
          "reply": {
            "type": "string",
            "example": "This is a sample reply"
          }
        }
      },
      "ReviewForm": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "This is a comment"
          },
          "restaurant_id": {
            "type": "integer",
            "format": "int64"
          },
          "date_of_visit": {
            "type": "string",
            "example": "2021-05-06"
          },
          "rating": {
            "type": "integer",
            "example": "1"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "comment": {
            "type": "string",
            "example": "This is a comment"
          },
          "user": {
            "type": "User"
          },
          "restaurant": {
            "type": "Restaurnat"
          },
          "created_at": {
            "type": "string",
            "example": "Feb 26, 2021, 5:09:31 AM"
          },
          "reply": {
            "type": "string",
            "example": "This is a sample reply"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "CommentForm": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "This is a comment"
          },
          "restaurant_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReviewReply" : {
        "type": "object",
        "properties": {
          "reply": {
            "type": "string",
            "example": "This is a reply"
          },
          "reviewId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CommentReply" : {
        "type": "object",
        "properties": {
          "reply": {
            "type": "string",
            "example": "This is a reply"
          },
          "commentId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "role": {
            "type": "string",
            "description": "User roles",
            "enum": ["owner", "customer"]
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "UpdateUserForm": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "James"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "updateUserForm"
        }
      },
      "RegisterForm": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "role": {
            "type": "string",
            "description": "User roles",
            "enum": ["owner", "customer"]
          }
        },
        "xml": {
          "name": "registerForm"
        }
      },
      "LoginForm": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
